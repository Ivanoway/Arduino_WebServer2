/*
  Web Server

 A simple web server that shows the value of the analog input pins.
 using an Arduino Wiznet Ethernet shield.

 Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Analog inputs attached to pins A0 through A5 (optional)

 created 18 Dec 2009
 by David A. Mellis
 modified 9 Apr 2012
 by Tom Igoe

 */

//#include <stdlib.h>
#include <SPI.h>
#include <Ethernet2.h>
#include <SD.h>

// L'adresse MAC du shield
byte mac[] = { 0x90, 0xA2, 0xDA, 0x10, 0xF6, 0x91 };
// L'adresse IP que prendra le shield
IPAddress ip(192,168,0,143);

// Initialise notre serveur
// Ce dernier écoutera sur le port 4200
EthernetServer server(4200);

File webFile;

void setup()
{
	//Init pin state
	digitalWrite(3, LOW);
	digitalWrite(4, LOW);
	digitalWrite(5, LOW);

	  // Open serial communications and wait for port to open:
	  Serial.begin(9600);	//For debug purposes
	  while (!Serial) {
	    ; // wait for serial port to connect. Needed for native USB port only
	  }

	  char error = 0;
	  // On démarre le shield Ethernet SANS adresse ip (donc donnée via DHCP)
	  error = Ethernet.begin(mac);

	  if (error == 0) {
	    Serial.println("Parametrage avec ip fixe...");
	    // si une erreur a eu lieu cela signifie que l'attribution DHCP
	    // ne fonctionne pas. On initialise donc en forçant une IP
	    Ethernet.begin(mac, ip);
	  }
	  Serial.println("Init...");
	  // Donne une seconde au shield pour s'initialiser
	  delay(1000);
	  // On lance le serveur
	  server.begin();
	  Serial.println("Pret !");

	  //Init SD card
	  Serial.print("Initializing SD card...");
	  if (!SD.begin(4)) {
	    Serial.println("initialization failed!");
	    return;
	  }
	  Serial.println("initialization done.");

	  //Check if index.htm file exist
	  if(!SD.exists("index.htm"))
	  {
		  Serial.println("ERROR - can't find index.htm file !");
		  return; 	//can't find index file
	  }
	  Serial.println("Success - Found index.htm file.");

}

void loop() {
	EthernetClient client = server.available();	//try to get the client

	char read_ptr[3];

	if(client){
		boolean currentLineIsBlank = true;
		while (client.connected()) {
			if(client.available()) {	//Check if client data is available to read
				char c = client.read(); 	//read 1 byte (character) from client
				//last line of client request is blank and ends with \n
				//respond to client after last line received
				if(c == '\n' && currentLineIsBlank) {
					//send a standard http response header
					client.println("HTTP/1.1 200 OK");
					client.println("Content-Type: text/html");
//					client.println("Access-Control-Allow-Origin: *");
					client.println("Connection: close");
					client.println();
					//send web page
					webFile = SD.open("index.htm");	//open web page index
					if(webFile) {
						while(webFile.available()) {
							read_ptr[0] = webFile.read();
							//Check if the next two characters are "m=" or "p="
							switch(read_ptr[0]){
							case 'm':
								read_ptr[1] = webFile.read();
								if(read_ptr[1] == '=')
									client.print(millis());	//if true, send millis()
								else
								{
									client.write(read_ptr[0]);	//else send the last two character read
									client.write(read_ptr[1]);
								}
								break;
							case 'p':
								read_ptr[1] = webFile.read();
								if(read_ptr[1] == '=')
								{
									read_ptr[2] = webFile.read(); //if true, get the pin number from the html file
									if(read_ptr[2] == '3')
										client.print(digitalRead(3)); //send pin 3 state
									else if(read_ptr[2] == '4')
										client.print(digitalRead(4)); //send pin 3 state
									else if(read_ptr[2] == '5')
										client.print(digitalRead(5)); //send pin 3 state
									else
									{
										client.print("HTML_PIN_ERROR");
									}
								}
								else
								{
									client.write(read_ptr[0]);	//else send the last two character read
									client.write(read_ptr[1]);
								}
								break;
							default:
								client.write(read_ptr[0]); //if there is no '=', then write the character on Ehternet
								break;
							}
//TODO Remettre cette ligne de code sans celles au dessus pour lire et envoyer le fichier index.htm.
//TODO La MAJ de l'arduino se fera via requete AJAX (ou javascript?
//							client.write(webFile.read()); //send web page to client
						}
						webFile.close();
					}
					break;
				}
				//every line of text received from the client ends with \r\n
				if(c == '\n') {
					//a text character was received from client
					currentLineIsBlank = false;
				}
			} //end if(client.available())
		} //end while(client.connected())
		delay(1); //give the web browser time to received the data
		client.stop(); //close the connection
	} //end if(client)
}
